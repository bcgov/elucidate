% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_functions.R
\name{plot_scatter}
\alias{plot_scatter}
\title{Generate a scatterplot.}
\usage{
plot_scatter(
  data,
  y,
  x,
  jitter = FALSE,
  ...,
  fill_var = NULL,
  colour_var = NULL,
  shape_var = NULL,
  size_var = NULL,
  ylab = NULL,
  xlab = NULL,
  title = NULL,
  fill_var_title = NULL,
  colour_var_title = NULL,
  shape_var_title = NULL,
  size_var_title = NULL,
  ylim = c(NA, NA),
  transform_y = FALSE,
  y_transformation = "log10",
  xlim = c(NA, NA),
  transform_x = FALSE,
  x_transformation = "log10",
  size_lim = c(NA, NA),
  transform_size = FALSE,
  size_transformation = "log10",
  fill_var_order = NULL,
  colour_var_order = NULL,
  shape_var_order = NULL,
  fill_var_labs = NULL,
  colour_var_labs = NULL,
  shape_var_labs = NULL,
  fill_var_values = NULL,
  colour_var_values = NULL,
  shape_var_values = NULL,
  regression_line = FALSE,
  regression_method = "gam",
  regression_formula = NULL,
  regression_se = FALSE,
  ci_level = 0.95,
  regression_geom = "smooth",
  regression_line_size = 1,
  regression_line_colour = NULL,
  regression_alpha = 0.5,
  regression_line_type = 1,
  regression_line_full_range = FALSE,
  regression_method_args = NULL,
  loess_span = 0.75,
  alpha = 0.6,
  greyscale = FALSE,
  theme = "classic",
  text_size = 14,
  font = c("sans", "serif", "mono"),
  facet_var = NULL,
  facet_var_order = NULL,
  facet_var_labs = NULL,
  facet_var_strip_position = c("top", "bottom"),
  facet_var_text_bold = TRUE,
  legend_position = c("right", "left", "top", "bottom"),
  omit_legend = FALSE,
  interactive = FALSE,
  aesthetic_options = FALSE
)
}
\arguments{
\item{data}{A data frame or tibble containing the dependent measure "y", the
independent measure "x", and any grouping variables or covariates.}

\item{y}{A numeric variable you want to plot against x.}

\item{x}{A numeric variable you want to plot against y.}

\item{jitter}{Set to TRUE to slightly offset overlapping points in random
directions. See \code{\link[ggplot2]{geom_jitter}} for details.}

\item{...}{graphical parameters (not associated with variables) to be passed
to \code{\link[ggplot2]{geom_point}}, e.g. colour or fill, to be applied
to all bars. To see some of the available options in a web browser, set the
aesthetic_options argument to TRUE.}

\item{fill_var}{Use if you want to assign a variable to the point fill
colour, e.g. fill_var = grouping_variable. Produces separate sets of points
for each level of the fill variable. See \code{\link[ggplot2]{aes}} for
details. Note: for geom_point, fill_var and fill only affect shapes 21-24.
To split the data by a variable based on colour, it is therefore easier to
use colour_var for this particular plot geometry.}

\item{colour_var}{Use if you want to assign a variable to the point outline
colour, e.g. colour_var = grouping_variable. Produces separate sets of
points for each level of the colour variable. See
\code{\link[ggplot2]{aes}} for details.}

\item{shape_var}{Use if you want to assign a variable to the point shape,
e.g. shape_var = grouping_variable. Produces separate sets of points for
each level of the shape variable. See \code{\link[ggplot2]{aes}} for
details.}

\item{size_var}{Use if you want to assign a continuous variable to the point
size, e.g. size_var = covariate. Adjusts point sizes according to the value
of the covariate. See \code{\link[ggplot2]{aes}} for details.}

\item{ylab}{Specify/overwrite the y-axis label using a character string, e.g.
"y-axis label"}

\item{xlab}{Specify/overwrite the x-axis label using a character string, e.g.
"x-axis label"}

\item{title}{Add a main title to the plot using a character string, e.g.
"scatterplot of y as a function of x"}

\item{fill_var_title}{If a variable has been assigned to fill using fill_var,
this allows you to modify the variable label in the plot legend.}

\item{colour_var_title}{If a variable has been assigned to colour using
colour_var, this allows you to modify the variable label in the plot
legend.}

\item{shape_var_title}{If a variable has been assigned to shape using
shape_var, this allows you to modify the variable label in the plot
legend.}

\item{size_var_title}{If a variable has been assigned to shape using
shape_var, this allows you to modify the variable label in the plot
legend.}

\item{ylim}{specify the y-axis limits, e.g. ylim = c(lower_limit,
upper_limit). Use NA for the existing minimum or maximum value of y, e.g.
the default is ylim = c(NA, NA)}

\item{transform_y}{Would you like to transform the y axis? (TRUE or FALSE)}

\item{y_transformation}{If transform_y = TRUE, this determines the
transformation to be applied. Common choices include "log10" (the default),
"log2", "sqrt", or "exp". See \code{\link[ggplot2]{scale_continuous}} for
details.}

\item{xlim}{specify the x-axis limits, e.g. xlim = c(lower_limit,
upper_limit). Use NA for the existing minimum or maximum value of x, e.g.
the default is xlim = c(NA, NA)}

\item{transform_x}{Would you like to transform the x axis? (TRUE or FALSE)}

\item{x_transformation}{If transform_x = TRUE, this determines the
transformation to be applied. Common choices include "log10" (the default),
"log2", "sqrt", or "exp". See \code{\link[ggplot2]{scale_continuous}} for
details.}

\item{size_lim}{specify the size scale limits, e.g. size_lim = c(lower_limit,
upper_limit). Use NA for the existing minimum or maximum value of x, e.g.
the default is size_lim = c(NA, NA)}

\item{transform_size}{Would you like to transform the size scale? (TRUE or FALSE)}

\item{size_transformation}{If transform_size = TRUE, this determines the
transformation to be applied. Common choices include "log10" (the default),
"log2", "sqrt", or "exp". See \code{\link[ggplot2]{scale_continuous}} for
details.}

\item{fill_var_order}{If a variable has been assigned to fill using fill_var,
this allows you to modify the order of the variable groups, e.g. fill_var =
grouping_variable, fill_var_order = c("group_2", "group_1"). See
\code{\link[forcats]{fct_relevel}} for details.}

\item{colour_var_order}{If a variable has been assigned to colour using
colour_var, this allows you to modify the order of the variable groups,
e.g. colour_var = grouping_variable, fill_var_order = c("group_2",
"group_1"). See \code{\link[forcats]{fct_relevel}} for details.}

\item{shape_var_order}{If a variable has been assigned to shape using
shape_var, this allows you to modify the order of the variable groups,
e.g. shape_var = grouping_variable, shape_var_order = c("group_2",
"group_1"). See \code{\link[forcats]{fct_relevel}} for details.}

\item{fill_var_labs}{If a variable has been assigned to fill using fill_var,
this allows you to modify the labels of the variable groups, e.g. fill_var
= grouping_variable, fill_var_labs = c("group_1_new_label" =
"group_1_old_label", "group_2_new_label" = "group_2_old_label"). See
\code{\link[forcats]{fct_recode}} for details.}

\item{colour_var_labs}{If a variable has been assigned to colour using
colour_var, this allows you to modify the labels of the variable groups,
e.g. colour_var = grouping_variable, colour_var_labs =
c("group_1_new_label" = "group_1_old_label", "group_2_new_label" =
"group_2_old_label"). See \code{\link[forcats]{fct_recode}} for details.}

\item{shape_var_labs}{If a variable has been assigned to shape using
shape_var, this allows you to modify the labels of the variable groups,
e.g. shape_var = grouping_variable, shape_var_labs =
c("group_1_new_label" = "group_1_old_label", "group_2_new_label" =
"group_2_old_label"). See \code{\link[forcats]{fct_recode}} for details.}

\item{fill_var_values}{If a variable has been assigned to fill using
fill_var, this allows you to modify the colours assigned to the fill of
each of the variable groups, e.g. fill_var = grouping_variable,
fill_var_values = c("blue", "red"). See
\code{\link[ggplot2]{scale_fill_manual}} for details. For the colour
options available in base R, see \code{\link[elucidate]{colour_options}}.}

\item{colour_var_values}{If a variable has been assigned to colour using
colour_var, this allows you to modify the colours assigned to the outline
of each of the variable groups, e.g. colour_var = grouping_variable,
colour_var_values = c("blue", "red"). See
\code{\link[ggplot2]{scale_fill_manual}} for details. For the colour
options available in base R, see \code{\link[elucidate]{colour_options}}.}

\item{shape_var_values}{If a variable has been assigned to shape using
shape_var, this allows you to modify the shapes assigned to each of the
variable groups, e.g. colour_var = grouping_variable, shape_var_values =
c(1, 2). See \code{\link[ggplot2]{scale_shape_manual}} for details.
For the available shape options, set aesthetic_options = TRUE.}

\item{regression_line}{Set to TRUE if you want to add a regression line to
the plot.}

\item{regression_method}{This determines the type of regression line to use.
Common options are "lm", "loess", & "gam". "gam" is the default, which fits
a generalized additive model using a smoothing term for x. This method has
a longer run time, but typically provides a better fit to the data than
other options and uses an optimization algorithm to determine the optimal
wiggliness of the line. If the relationship between y and x is linear, the
output will be equivalent to fitting a linear model. See
\code{\link[ggplot2]{stat_smooth}} and \code{\link[mgcv]{gam}} for details.}

\item{regression_formula}{Specify a formula to use with the chosen regression
method, using the formula() interface. see
\code{\link[ggplot2]{stat_smooth}} and \code{\link[stats]{formula}} for
details. Useful for plotting polynomials, e.g. regression_formula = y ~
poly(x, 2).}

\item{regression_se}{Add a confidence envelope for the regression line? (TRUE
or FALSE)}

\item{ci_level}{Confidence level for the regression_line confidence envelope.
Default is 0.95.}

\item{regression_geom}{Not typically modified. See
\code{\link[ggplot2]{stat_smooth}} for more information}

\item{regression_line_size}{Adjusts the thickness/size of regression lines}

\item{regression_line_colour}{Adjusts the colour of regression lines}

\item{regression_alpha}{Adjusts the transparency of the regression confidence
envelope.}

\item{regression_line_type}{Adjusts the linetype of regression lines, e.g.
"solid", "dashed", etc.}

\item{regression_line_full_range}{Set to TRUE if you want regression lines to
extend beyond the limits of the data to cover the full range of the plot.}

\item{regression_method_args}{Additional arguments you would like passed to
the regression_method modeling function, see method.args in
\code{\link[ggplot2]{stat_smooth}}.}

\item{loess_span}{Affects the wiggliness of the loess regression line. See
\code{\link[ggplot2]{stat_smooth}} for details.}

\item{alpha}{This adjusts the transparency/opacity of the graphical
components of the plot, ranging from 0 = 100\% transparent to 1 = 100\%
opaque.}

\item{greyscale}{Set to TRUE if you want the plot converted to greyscale.}

\item{theme}{Adjusts the theme using 1 of 6 predefined "complete" theme
templates provided by ggplot2. Currenlty supported options are: "classic"
(the elucidate default), "bw", "grey" (the ggplot2 default), "light",
"dark", & "minimal". See \code{\link[ggplot2]{theme_classic}} for more
information.}

\item{text_size}{This controls the size of all plot text. Default = 14.}

\item{font}{This controls the font of all plot text. Default = "sans"
(Arial). Other options include "serif" (Times New Roman) and "mono" (Courier
New).}

\item{facet_var}{Use if you want separate plots for each level of a grouping
variable (i.e. a facetted plot), e.g. facet_var = grouping_variable. See
\code{\link[ggplot2]{facet_wrap}} for details.}

\item{facet_var_order}{If a variable has been assigned for facetting using
facet_var, this allows you to modify the order of the variable groups, e.g.
facet_var = grouping_variable, facet_var_order = c("group_2", "group_1").
See \code{\link[forcats]{fct_relevel}} for details.}

\item{facet_var_labs}{If a variable has been assigned for facetting using
facet_var, this allows you to modify the labels of the variable groups
which will appear in the facet strips, e.g. facet_var = grouping_variable,
facet_var_labs = c("group_1_new_label" = "group_1_old_label",
"group_2_new_label" = "group_2_old_label"). See
\code{\link[forcats]{fct_recode}} for details.}

\item{facet_var_strip_position}{If a variable has been assigned for facetting
using facet_var, this allows you to modify the position of the facet strip
labels. Sensible options include "top" (the default) or "bottom".}

\item{facet_var_text_bold}{If a variable has been assigned for facetting
using facet_var, this allows you to use boldface (TRUE/default or FALSE)
for the facet strip label text.}

\item{legend_position}{This allows you to modify the legend position.
Options include "right" (the default), "left", "top", & "bottom".}

\item{omit_legend}{Set to TRUE if you want to remove/omit the legends.}

\item{interactive}{Determines whether a static ggplot object or an interactive html
plotly object is returned. See \code{\link[plotly]{ggplotly}} for details.}

\item{aesthetic_options}{If set to TRUE, opens a web browser to the tidyverse
online aesthetic options vignette.}
}
\value{
A ggplot object or plotly object depending on whether static or
interactive output was requested.
}
\description{
Easily generate scatterplots using ggplot2 with a simplified
customization interface for common modifications with static (ggplot) and
interactive (plotly) output options. The static output is useful for
producing static reports (e.g. for manuscripts) and is readily customized
further using ggplot2 syntax. The interactive output is helpful for
exploring the data and producing dynamic html reports.
}
\examples{
data(mtcars) #load the mtcars data

library(magrittr)

mtcars \%>\% plot_scatter(y = mpg, x = hp, colour = "blue")

\dontrun{
mtcars \%>\%
  plot_scatter(y = mpg, x = hp)

mtcars \%>\%
  plot_scatter(y = mpg, x = hp, fill_var = cyl)

mtcars \%>\%
  plot_scatter(y = mpg, x = hp, fill_var = cyl, shape = 21, size = 2)

mtcars \%>\%
  plot_scatter(y = mpg, x = hp, colour_var = cyl, shape_var = am, size = 4)

mtcars \%>\%
  plot_scatter(y = mpg, x = hp, colour = "blue",
               shape_var_labs = c("manual" = "0", "automatic" = "1"),
               shape_var = am, theme = "bw")

#map colour, shape, and size to different variables
windows()

mtcars \%>\%
  plot_scatter(y = mpg, x = hp,
               colour_var = cyl, shape_var = am, size_var = wt)

#map colour and shape to a common variable
mtcars \%>\%
  plot_scatter(y = mpg, x = hp, shape_var = cyl, colour_var = cyl)

mtcars \%>\%
  plot_scatter(y = mpg, x = hp, shape_var = cyl, colour_var = cyl)

#add a regression line

#linear
mtcars \%>\%
  plot_scatter(y = mpg, x = hp,
               regression_line = T, regression_method = "lm")

#change the regression line colour
mtcars \%>\%
  plot_scatter(y = mpg, x = hp,
               regression_line = T, regression_method = "lm",
               regression_line_colour = "green")

#add standard error envelope
mtcars \%>\%
  plot_scatter(y = mpg, x = hp,
               regression_line = T, regression_method = "lm", regression_se = T)

#adjust standard error envelope transparency
mtcars \%>\%
  plot_scatter(y = mpg, x = hp,
               regression_line = T, regression_method = "lm", regression_se = T,
               regression_alpha = 0.8) #default is 0.5


#split by a grouping variable
mtcars \%>\%
  plot_scatter(y = mpg, x = hp, colour_var = cyl,
               regression_line = T, regression_method = "lm")


#fit a polynomial regression line by specifying a regression_formula = formula()
mtcars \%>\%
  plot_scatter(y = mpg, x = hp,
               regression_line = T, regression_method = "lm", regression_se = T,
               regression_formula = y ~ poly(x, 2))

mtcars \%>\%
  plot_scatter(y = mpg, x = hp, shape_var = cyl, colour_var = cyl,
               regression_line = T, regression_method = "lm",
               regression_formula = y ~ poly(x, 3))


#fit a non-linear regression line using locally(-weighted) scatterplot smoothing (loess)
mtcars \%>\%
  plot_scatter(y = mpg, x = hp,
               regression_line = T, regression_se = T,
               regression_method = "loess")


#fit a non-linear regression line using locally(-weighted) scatterplot smoothing (loess)
#& also adjust the span (default = 0.75).
#This controls how much of the data is used for the weighted smoothing.

mtcars \%>\%
  plot_scatter(y = mpg, x = hp,
               regression_line = T, regression_se = T,
               regression_method = "loess", loess_span = 0.3)

#fit a non-linear regression line using a generalized additive model (gam), the default
mtcars \%>\%
  plot_scatter(y = mpg, x = hp,
               regression_line = T, regression_se = T,
               regression_method = "gam")

#use a dashed regression line instead
mtcars \%>\%
  plot_scatter(y = mpg, x = hp,
               regression_line = T, regression_se = T, regression_line_type = "dashed")

#more complex example with overplotting
pdata \%>\%
  plot_scatter(y = y1, x = d, colour_var = g,
               regression_line = T)

#option 1 for dealing with overplotting: add jittering to offset overlappping points
 pdata \%>\%
 plot_scatter(y = y1, x = d, colour_var = g,
               jitter = T,
               regression_line = T)

#option 2: make overlapping values more transparent
 pdata \%>\%
  plot_scatter(y = y1, x = d, colour_var = g,
               alpha = 0.2,
               regression_line = T)

#option 3: do both and make it interactive
pdata \%>\%
 plot_scatter(y = y1, x = d, colour_var = g,
              jitter = T, alpha = 0.2,
              regression_line = T, interactive = TRUE)

#add a faceting variable
windows()
pdata \%>\%
 plot_scatter(y = y1, x = d,
              colour = "black", shape = 21, fill = "green4",
              jitter = T, size = 4, alpha = 0.1,
              regression_line = T, regression_se = T,
              facet_var = g,
              ylab = "outcome",
              theme = "bw")

#open a web page with details on the aesthetic options for ggplot2
mtcars \%>\%
 plot_scatter(y = mpg, x = hp, aesthetic_options = T)
}


}
\references{
Wickham, H. (2016). ggplot2: elegant graphics for data analysis. New York, N.Y.: Springer-Verlag.
}
\seealso{
\code{\link[ggplot2]{geom_point}},
\code{\link[ggplot2]{geom_jitter}}, \code{\link[ggplot2]{stat_smooth}},
\code{\link[plotly]{ggplotly}}
}
\author{
Craig P. Hutton, \email{craig.hutton@gov.bc.ca}
}
